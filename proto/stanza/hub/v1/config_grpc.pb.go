// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: stanza/hub/v1/config.proto

package hubv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConfigService_GetDecoratorConfig_FullMethodName = "/stanza.hub.v1.ConfigService/GetDecoratorConfig"
	ConfigService_GetBrowserContext_FullMethodName  = "/stanza.hub.v1.ConfigService/GetBrowserContext"
	ConfigService_GetServiceConfig_FullMethodName   = "/stanza.hub.v1.ConfigService/GetServiceConfig"
)

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigServiceClient interface {
	GetDecoratorConfig(ctx context.Context, in *GetDecoratorConfigRequest, opts ...grpc.CallOption) (*GetDecoratorConfigResponse, error)
	GetBrowserContext(ctx context.Context, in *GetBrowserContextRequest, opts ...grpc.CallOption) (*GetBrowserContextResponse, error)
	GetServiceConfig(ctx context.Context, in *GetServiceConfigRequest, opts ...grpc.CallOption) (*GetServiceConfigResponse, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) GetDecoratorConfig(ctx context.Context, in *GetDecoratorConfigRequest, opts ...grpc.CallOption) (*GetDecoratorConfigResponse, error) {
	out := new(GetDecoratorConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetDecoratorConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetBrowserContext(ctx context.Context, in *GetBrowserContextRequest, opts ...grpc.CallOption) (*GetBrowserContextResponse, error) {
	out := new(GetBrowserContextResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetBrowserContext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetServiceConfig(ctx context.Context, in *GetServiceConfigRequest, opts ...grpc.CallOption) (*GetServiceConfigResponse, error) {
	out := new(GetServiceConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetServiceConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations must embed UnimplementedConfigServiceServer
// for forward compatibility
type ConfigServiceServer interface {
	GetDecoratorConfig(context.Context, *GetDecoratorConfigRequest) (*GetDecoratorConfigResponse, error)
	GetBrowserContext(context.Context, *GetBrowserContextRequest) (*GetBrowserContextResponse, error)
	GetServiceConfig(context.Context, *GetServiceConfigRequest) (*GetServiceConfigResponse, error)
	mustEmbedUnimplementedConfigServiceServer()
}

// UnimplementedConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigServiceServer struct {
}

func (UnimplementedConfigServiceServer) GetDecoratorConfig(context.Context, *GetDecoratorConfigRequest) (*GetDecoratorConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDecoratorConfig not implemented")
}
func (UnimplementedConfigServiceServer) GetBrowserContext(context.Context, *GetBrowserContextRequest) (*GetBrowserContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrowserContext not implemented")
}
func (UnimplementedConfigServiceServer) GetServiceConfig(context.Context, *GetServiceConfigRequest) (*GetServiceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceConfig not implemented")
}
func (UnimplementedConfigServiceServer) mustEmbedUnimplementedConfigServiceServer() {}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_GetDecoratorConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDecoratorConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetDecoratorConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetDecoratorConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetDecoratorConfig(ctx, req.(*GetDecoratorConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetBrowserContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrowserContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetBrowserContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetBrowserContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetBrowserContext(ctx, req.(*GetBrowserContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetServiceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetServiceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetServiceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetServiceConfig(ctx, req.(*GetServiceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stanza.hub.v1.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDecoratorConfig",
			Handler:    _ConfigService_GetDecoratorConfig_Handler,
		},
		{
			MethodName: "GetBrowserContext",
			Handler:    _ConfigService_GetBrowserContext_Handler,
		},
		{
			MethodName: "GetServiceConfig",
			Handler:    _ConfigService_GetServiceConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stanza/hub/v1/config.proto",
}
