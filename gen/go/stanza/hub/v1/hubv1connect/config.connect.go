// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: stanza/hub/v1/config.proto

package hubv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/StanzaSystems/sdk-go/gen/go/stanza/hub/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ConfigServiceName is the fully-qualified name of the ConfigService service.
	ConfigServiceName = "stanza.hub.v1.ConfigService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConfigServiceGetDecoratorConfigProcedure is the fully-qualified name of the ConfigService's
	// GetDecoratorConfig RPC.
	ConfigServiceGetDecoratorConfigProcedure = "/stanza.hub.v1.ConfigService/GetDecoratorConfig"
	// ConfigServiceGetBrowserContextProcedure is the fully-qualified name of the ConfigService's
	// GetBrowserContext RPC.
	ConfigServiceGetBrowserContextProcedure = "/stanza.hub.v1.ConfigService/GetBrowserContext"
	// ConfigServiceGetServiceConfigProcedure is the fully-qualified name of the ConfigService's
	// GetServiceConfig RPC.
	ConfigServiceGetServiceConfigProcedure = "/stanza.hub.v1.ConfigService/GetServiceConfig"
)

// ConfigServiceClient is a client for the stanza.hub.v1.ConfigService service.
type ConfigServiceClient interface {
	GetDecoratorConfig(context.Context, *connect_go.Request[v1.GetDecoratorConfigRequest]) (*connect_go.Response[v1.GetDecoratorConfigResponse], error)
	GetBrowserContext(context.Context, *connect_go.Request[v1.GetBrowserContextRequest]) (*connect_go.Response[v1.GetBrowserContextResponse], error)
	GetServiceConfig(context.Context, *connect_go.Request[v1.GetServiceConfigRequest]) (*connect_go.Response[v1.GetServiceConfigResponse], error)
}

// NewConfigServiceClient constructs a client for the stanza.hub.v1.ConfigService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConfigServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ConfigServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &configServiceClient{
		getDecoratorConfig: connect_go.NewClient[v1.GetDecoratorConfigRequest, v1.GetDecoratorConfigResponse](
			httpClient,
			baseURL+ConfigServiceGetDecoratorConfigProcedure,
			opts...,
		),
		getBrowserContext: connect_go.NewClient[v1.GetBrowserContextRequest, v1.GetBrowserContextResponse](
			httpClient,
			baseURL+ConfigServiceGetBrowserContextProcedure,
			opts...,
		),
		getServiceConfig: connect_go.NewClient[v1.GetServiceConfigRequest, v1.GetServiceConfigResponse](
			httpClient,
			baseURL+ConfigServiceGetServiceConfigProcedure,
			opts...,
		),
	}
}

// configServiceClient implements ConfigServiceClient.
type configServiceClient struct {
	getDecoratorConfig *connect_go.Client[v1.GetDecoratorConfigRequest, v1.GetDecoratorConfigResponse]
	getBrowserContext  *connect_go.Client[v1.GetBrowserContextRequest, v1.GetBrowserContextResponse]
	getServiceConfig   *connect_go.Client[v1.GetServiceConfigRequest, v1.GetServiceConfigResponse]
}

// GetDecoratorConfig calls stanza.hub.v1.ConfigService.GetDecoratorConfig.
func (c *configServiceClient) GetDecoratorConfig(ctx context.Context, req *connect_go.Request[v1.GetDecoratorConfigRequest]) (*connect_go.Response[v1.GetDecoratorConfigResponse], error) {
	return c.getDecoratorConfig.CallUnary(ctx, req)
}

// GetBrowserContext calls stanza.hub.v1.ConfigService.GetBrowserContext.
func (c *configServiceClient) GetBrowserContext(ctx context.Context, req *connect_go.Request[v1.GetBrowserContextRequest]) (*connect_go.Response[v1.GetBrowserContextResponse], error) {
	return c.getBrowserContext.CallUnary(ctx, req)
}

// GetServiceConfig calls stanza.hub.v1.ConfigService.GetServiceConfig.
func (c *configServiceClient) GetServiceConfig(ctx context.Context, req *connect_go.Request[v1.GetServiceConfigRequest]) (*connect_go.Response[v1.GetServiceConfigResponse], error) {
	return c.getServiceConfig.CallUnary(ctx, req)
}

// ConfigServiceHandler is an implementation of the stanza.hub.v1.ConfigService service.
type ConfigServiceHandler interface {
	GetDecoratorConfig(context.Context, *connect_go.Request[v1.GetDecoratorConfigRequest]) (*connect_go.Response[v1.GetDecoratorConfigResponse], error)
	GetBrowserContext(context.Context, *connect_go.Request[v1.GetBrowserContextRequest]) (*connect_go.Response[v1.GetBrowserContextResponse], error)
	GetServiceConfig(context.Context, *connect_go.Request[v1.GetServiceConfigRequest]) (*connect_go.Response[v1.GetServiceConfigResponse], error)
}

// NewConfigServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConfigServiceHandler(svc ConfigServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ConfigServiceGetDecoratorConfigProcedure, connect_go.NewUnaryHandler(
		ConfigServiceGetDecoratorConfigProcedure,
		svc.GetDecoratorConfig,
		opts...,
	))
	mux.Handle(ConfigServiceGetBrowserContextProcedure, connect_go.NewUnaryHandler(
		ConfigServiceGetBrowserContextProcedure,
		svc.GetBrowserContext,
		opts...,
	))
	mux.Handle(ConfigServiceGetServiceConfigProcedure, connect_go.NewUnaryHandler(
		ConfigServiceGetServiceConfigProcedure,
		svc.GetServiceConfig,
		opts...,
	))
	return "/stanza.hub.v1.ConfigService/", mux
}

// UnimplementedConfigServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConfigServiceHandler struct{}

func (UnimplementedConfigServiceHandler) GetDecoratorConfig(context.Context, *connect_go.Request[v1.GetDecoratorConfigRequest]) (*connect_go.Response[v1.GetDecoratorConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("stanza.hub.v1.ConfigService.GetDecoratorConfig is not implemented"))
}

func (UnimplementedConfigServiceHandler) GetBrowserContext(context.Context, *connect_go.Request[v1.GetBrowserContextRequest]) (*connect_go.Response[v1.GetBrowserContextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("stanza.hub.v1.ConfigService.GetBrowserContext is not implemented"))
}

func (UnimplementedConfigServiceHandler) GetServiceConfig(context.Context, *connect_go.Request[v1.GetServiceConfigRequest]) (*connect_go.Response[v1.GetServiceConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("stanza.hub.v1.ConfigService.GetServiceConfig is not implemented"))
}
