// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: stanza/hub/v1/quota.proto

package hubv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/StanzaSystems/sdk-go/gen/go/stanza/hub/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// QuotaServiceName is the fully-qualified name of the QuotaService service.
	QuotaServiceName = "stanza.hub.v1.QuotaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// QuotaServiceGetTokenProcedure is the fully-qualified name of the QuotaService's GetToken RPC.
	QuotaServiceGetTokenProcedure = "/stanza.hub.v1.QuotaService/GetToken"
	// QuotaServiceGetTokenLeaseProcedure is the fully-qualified name of the QuotaService's
	// GetTokenLease RPC.
	QuotaServiceGetTokenLeaseProcedure = "/stanza.hub.v1.QuotaService/GetTokenLease"
	// QuotaServiceSetTokenLeaseConsumedProcedure is the fully-qualified name of the QuotaService's
	// SetTokenLeaseConsumed RPC.
	QuotaServiceSetTokenLeaseConsumedProcedure = "/stanza.hub.v1.QuotaService/SetTokenLeaseConsumed"
	// QuotaServiceValidateTokenProcedure is the fully-qualified name of the QuotaService's
	// ValidateToken RPC.
	QuotaServiceValidateTokenProcedure = "/stanza.hub.v1.QuotaService/ValidateToken"
)

// QuotaServiceClient is a client for the stanza.hub.v1.QuotaService service.
type QuotaServiceClient interface {
	GetToken(context.Context, *connect_go.Request[v1.GetTokenRequest]) (*connect_go.Response[v1.GetTokenResponse], error)
	GetTokenLease(context.Context, *connect_go.Request[v1.GetTokenLeaseRequest]) (*connect_go.Response[v1.GetTokenLeaseResponse], error)
	SetTokenLeaseConsumed(context.Context, *connect_go.Request[v1.SetTokenLeaseConsumedRequest]) (*connect_go.Response[v1.SetTokenLeaseConsumedResponse], error)
	// Used by ingress decorators to validate Hub-generated tokens.
	ValidateToken(context.Context, *connect_go.Request[v1.ValidateTokenRequest]) (*connect_go.Response[v1.ValidateTokenResponse], error)
}

// NewQuotaServiceClient constructs a client for the stanza.hub.v1.QuotaService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQuotaServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) QuotaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &quotaServiceClient{
		getToken: connect_go.NewClient[v1.GetTokenRequest, v1.GetTokenResponse](
			httpClient,
			baseURL+QuotaServiceGetTokenProcedure,
			opts...,
		),
		getTokenLease: connect_go.NewClient[v1.GetTokenLeaseRequest, v1.GetTokenLeaseResponse](
			httpClient,
			baseURL+QuotaServiceGetTokenLeaseProcedure,
			opts...,
		),
		setTokenLeaseConsumed: connect_go.NewClient[v1.SetTokenLeaseConsumedRequest, v1.SetTokenLeaseConsumedResponse](
			httpClient,
			baseURL+QuotaServiceSetTokenLeaseConsumedProcedure,
			opts...,
		),
		validateToken: connect_go.NewClient[v1.ValidateTokenRequest, v1.ValidateTokenResponse](
			httpClient,
			baseURL+QuotaServiceValidateTokenProcedure,
			opts...,
		),
	}
}

// quotaServiceClient implements QuotaServiceClient.
type quotaServiceClient struct {
	getToken              *connect_go.Client[v1.GetTokenRequest, v1.GetTokenResponse]
	getTokenLease         *connect_go.Client[v1.GetTokenLeaseRequest, v1.GetTokenLeaseResponse]
	setTokenLeaseConsumed *connect_go.Client[v1.SetTokenLeaseConsumedRequest, v1.SetTokenLeaseConsumedResponse]
	validateToken         *connect_go.Client[v1.ValidateTokenRequest, v1.ValidateTokenResponse]
}

// GetToken calls stanza.hub.v1.QuotaService.GetToken.
func (c *quotaServiceClient) GetToken(ctx context.Context, req *connect_go.Request[v1.GetTokenRequest]) (*connect_go.Response[v1.GetTokenResponse], error) {
	return c.getToken.CallUnary(ctx, req)
}

// GetTokenLease calls stanza.hub.v1.QuotaService.GetTokenLease.
func (c *quotaServiceClient) GetTokenLease(ctx context.Context, req *connect_go.Request[v1.GetTokenLeaseRequest]) (*connect_go.Response[v1.GetTokenLeaseResponse], error) {
	return c.getTokenLease.CallUnary(ctx, req)
}

// SetTokenLeaseConsumed calls stanza.hub.v1.QuotaService.SetTokenLeaseConsumed.
func (c *quotaServiceClient) SetTokenLeaseConsumed(ctx context.Context, req *connect_go.Request[v1.SetTokenLeaseConsumedRequest]) (*connect_go.Response[v1.SetTokenLeaseConsumedResponse], error) {
	return c.setTokenLeaseConsumed.CallUnary(ctx, req)
}

// ValidateToken calls stanza.hub.v1.QuotaService.ValidateToken.
func (c *quotaServiceClient) ValidateToken(ctx context.Context, req *connect_go.Request[v1.ValidateTokenRequest]) (*connect_go.Response[v1.ValidateTokenResponse], error) {
	return c.validateToken.CallUnary(ctx, req)
}

// QuotaServiceHandler is an implementation of the stanza.hub.v1.QuotaService service.
type QuotaServiceHandler interface {
	GetToken(context.Context, *connect_go.Request[v1.GetTokenRequest]) (*connect_go.Response[v1.GetTokenResponse], error)
	GetTokenLease(context.Context, *connect_go.Request[v1.GetTokenLeaseRequest]) (*connect_go.Response[v1.GetTokenLeaseResponse], error)
	SetTokenLeaseConsumed(context.Context, *connect_go.Request[v1.SetTokenLeaseConsumedRequest]) (*connect_go.Response[v1.SetTokenLeaseConsumedResponse], error)
	// Used by ingress decorators to validate Hub-generated tokens.
	ValidateToken(context.Context, *connect_go.Request[v1.ValidateTokenRequest]) (*connect_go.Response[v1.ValidateTokenResponse], error)
}

// NewQuotaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQuotaServiceHandler(svc QuotaServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(QuotaServiceGetTokenProcedure, connect_go.NewUnaryHandler(
		QuotaServiceGetTokenProcedure,
		svc.GetToken,
		opts...,
	))
	mux.Handle(QuotaServiceGetTokenLeaseProcedure, connect_go.NewUnaryHandler(
		QuotaServiceGetTokenLeaseProcedure,
		svc.GetTokenLease,
		opts...,
	))
	mux.Handle(QuotaServiceSetTokenLeaseConsumedProcedure, connect_go.NewUnaryHandler(
		QuotaServiceSetTokenLeaseConsumedProcedure,
		svc.SetTokenLeaseConsumed,
		opts...,
	))
	mux.Handle(QuotaServiceValidateTokenProcedure, connect_go.NewUnaryHandler(
		QuotaServiceValidateTokenProcedure,
		svc.ValidateToken,
		opts...,
	))
	return "/stanza.hub.v1.QuotaService/", mux
}

// UnimplementedQuotaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedQuotaServiceHandler struct{}

func (UnimplementedQuotaServiceHandler) GetToken(context.Context, *connect_go.Request[v1.GetTokenRequest]) (*connect_go.Response[v1.GetTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("stanza.hub.v1.QuotaService.GetToken is not implemented"))
}

func (UnimplementedQuotaServiceHandler) GetTokenLease(context.Context, *connect_go.Request[v1.GetTokenLeaseRequest]) (*connect_go.Response[v1.GetTokenLeaseResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("stanza.hub.v1.QuotaService.GetTokenLease is not implemented"))
}

func (UnimplementedQuotaServiceHandler) SetTokenLeaseConsumed(context.Context, *connect_go.Request[v1.SetTokenLeaseConsumedRequest]) (*connect_go.Response[v1.SetTokenLeaseConsumedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("stanza.hub.v1.QuotaService.SetTokenLeaseConsumed is not implemented"))
}

func (UnimplementedQuotaServiceHandler) ValidateToken(context.Context, *connect_go.Request[v1.ValidateTokenRequest]) (*connect_go.Response[v1.ValidateTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("stanza.hub.v1.QuotaService.ValidateToken is not implemented"))
}
