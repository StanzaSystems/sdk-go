// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: stanza/hub/v1/config.proto

package hubv1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetDecoratorConfigRequest is the request from Backend SDKs to Hub for an decorator's config. SDKs are expected to periodically poll, giving the version of the most recent configuration seen/. Configurations may be large; we will not re-send them unless they have changed. Decorator configurations may vary between envs. Decorator configurations are SHARED between Services, but may be overridden for specific Services.
//
// Required Header: X-Stanza-Key
type GetDecoratorConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set if the client has seen a previous version of the config. Server will send data only if newer config available.
	VersionSeen *string `protobuf:"bytes,1,opt,name=version_seen,json=versionSeen,proto3,oneof" json:"version_seen,omitempty"`
	// Information required to select and return the correct DecoratorConfig version.
	S *DecoratorServiceSelector `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *GetDecoratorConfigRequest) Reset() {
	*x = GetDecoratorConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDecoratorConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDecoratorConfigRequest) ProtoMessage() {}

func (x *GetDecoratorConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDecoratorConfigRequest.ProtoReflect.Descriptor instead.
func (*GetDecoratorConfigRequest) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_config_proto_rawDescGZIP(), []int{0}
}

func (x *GetDecoratorConfigRequest) GetVersionSeen() string {
	if x != nil && x.VersionSeen != nil {
		return *x.VersionSeen
	}
	return ""
}

func (x *GetDecoratorConfigRequest) GetS() *DecoratorServiceSelector {
	if x != nil {
		return x.S
	}
	return nil
}

// GetDecoratorConfigResponse is the response from Hub to Backend SDKs.
// Note that `config_data_sent` will be false and `config` will be empty if we did not have a newer config
// version than `version_seen`.
type GetDecoratorConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        string           `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ConfigDataSent bool             `protobuf:"varint,2,opt,name=config_data_sent,json=configDataSent,proto3" json:"config_data_sent,omitempty"`
	Config         *DecoratorConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetDecoratorConfigResponse) Reset() {
	*x = GetDecoratorConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDecoratorConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDecoratorConfigResponse) ProtoMessage() {}

func (x *GetDecoratorConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDecoratorConfigResponse.ProtoReflect.Descriptor instead.
func (*GetDecoratorConfigResponse) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_config_proto_rawDescGZIP(), []int{1}
}

func (x *GetDecoratorConfigResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetDecoratorConfigResponse) GetConfigDataSent() bool {
	if x != nil {
		return x.ConfigDataSent
	}
	return false
}

func (x *GetDecoratorConfigResponse) GetConfig() *DecoratorConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// DecoratorConfig represents a configuration for a given Stanza SDK instrumented Decorator, which may be used by multiple services!
// If trace_config is empty, no per-decorator trace configuration is applied. Service-level trace configuration will be used (if applicable).
// If check_quota is false, then no ratelimiting will be performed. All quota requests will succeed and the SDK may short-circuit quota requests, i.e. not call Hub for quota.
// At a later point (post V0), there will be additional per-decorator configuration, such as deadline overrides, adaptive circuitbreaking configs, etc.
type DecoratorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidateIngressTokens bool `protobuf:"varint,1,opt,name=validate_ingress_tokens,json=validateIngressTokens,proto3" json:"validate_ingress_tokens,omitempty"` // Boolean representing wether to validate contents of the X-Stanza-Token header.
	// Quota
	CheckQuota bool     `protobuf:"varint,5,opt,name=check_quota,json=checkQuota,proto3" json:"check_quota,omitempty"` // Boolean representing whether quota checks are enabled.
	QuotaTags  []string `protobuf:"bytes,6,rep,name=quota_tags,json=quotaTags,proto3" json:"quota_tags,omitempty"`     // The set of tags which are used for quota management. For example, a 'customer_id' tag might be used to implement per-customer quota limits. Only the tags listed here should be included in GetToken and GetTokenLease requests.
	// OTEL
	TraceConfig  *TraceConfig  `protobuf:"bytes,8,opt,name=trace_config,json=traceConfig,proto3,oneof" json:"trace_config,omitempty"`
	MetricConfig *MetricConfig `protobuf:"bytes,9,opt,name=metric_config,json=metricConfig,proto3,oneof" json:"metric_config,omitempty"`
}

func (x *DecoratorConfig) Reset() {
	*x = DecoratorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecoratorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecoratorConfig) ProtoMessage() {}

func (x *DecoratorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecoratorConfig.ProtoReflect.Descriptor instead.
func (*DecoratorConfig) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_config_proto_rawDescGZIP(), []int{2}
}

func (x *DecoratorConfig) GetValidateIngressTokens() bool {
	if x != nil {
		return x.ValidateIngressTokens
	}
	return false
}

func (x *DecoratorConfig) GetCheckQuota() bool {
	if x != nil {
		return x.CheckQuota
	}
	return false
}

func (x *DecoratorConfig) GetQuotaTags() []string {
	if x != nil {
		return x.QuotaTags
	}
	return nil
}

func (x *DecoratorConfig) GetTraceConfig() *TraceConfig {
	if x != nil {
		return x.TraceConfig
	}
	return nil
}

func (x *DecoratorConfig) GetMetricConfig() *MetricConfig {
	if x != nil {
		return x.MetricConfig
	}
	return nil
}

// GetBrowserContextRequest is the request from Browser SDKs to Hub for a browser config.
// SDKs are expected to periodically poll, giving the version of the most recent configuration seen.
// Configurations may be large; we will not re-send them unless they have changed.
// If no feature_names are specified, all Features belonging to the organisation will be returned.
//
// Required Header: X-Stanza-Key
// Optional Header: etag
type GetBrowserContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information required to select and return the most recent BrowserContext version. If Feature names is nil, will return all Features in the organisation associated with the bearer token/API key, otherwise only information related to the named Features will be returned.
	Feature *FeatureSelector `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature,omitempty"`
}

func (x *GetBrowserContextRequest) Reset() {
	*x = GetBrowserContextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBrowserContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrowserContextRequest) ProtoMessage() {}

func (x *GetBrowserContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrowserContextRequest.ProtoReflect.Descriptor instead.
func (*GetBrowserContextRequest) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_config_proto_rawDescGZIP(), []int{3}
}

func (x *GetBrowserContextRequest) GetFeature() *FeatureSelector {
	if x != nil {
		return x.Feature
	}
	return nil
}

// GetBrowserConfigResponse is the response from Hub to Browser SDKs. It is designed to be cacheable for short periods. It is also designed to be shareable between multiple clients (e.g. in case of SSR or use of CDN etc).
//
// Returns etag header.
//
// May return 304 Not Modified with etag header and empty payload.
type GetBrowserContextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureConfigs []*FeatureConfig `protobuf:"bytes,2,rep,name=feature_configs,json=featureConfigs,proto3" json:"feature_configs,omitempty"`
}

func (x *GetBrowserContextResponse) Reset() {
	*x = GetBrowserContextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBrowserContextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrowserContextResponse) ProtoMessage() {}

func (x *GetBrowserContextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrowserContextResponse.ProtoReflect.Descriptor instead.
func (*GetBrowserContextResponse) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_config_proto_rawDescGZIP(), []int{4}
}

func (x *GetBrowserContextResponse) GetFeatureConfigs() []*FeatureConfig {
	if x != nil {
		return x.FeatureConfigs
	}
	return nil
}

type FeatureConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Config *BrowserConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *FeatureConfig) Reset() {
	*x = FeatureConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureConfig) ProtoMessage() {}

func (x *FeatureConfig) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureConfig.ProtoReflect.Descriptor instead.
func (*FeatureConfig) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_config_proto_rawDescGZIP(), []int{5}
}

func (x *FeatureConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureConfig) GetConfig() *BrowserConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// BrowserConfig describes the current configuration for one Feature.
// Instead of being simply enabled or disabled, features are enabled for a
// particular percentage of clients (0% is entirely disabled, 100% is entirely enabled).
// Clients are required to self-select a percentile value from 1 to 100 in a way that is random
// and trusted to consider a Feature disabled if it is disabled for the selected percentile.
// action_code_disabled describes what the Browser is expected to do if the Feature is not enabled for
// their assigned percentile.
// message_disabled may be displayed as a fallback action.
// action_code_enabled describes what the Browser is expected to do if the Feature is enabled for
// their assigned percentile. This enabled degraded modes. Can be empty.
// message_enabled may be displayed while in degraded mode. Can be empty.
// Likely additional fields will be added here as the Browser SDK behavior set becomes more complex.
type BrowserConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnabledPercent     *uint32 `protobuf:"varint,2,opt,name=enabled_percent,json=enabledPercent,proto3,oneof" json:"enabled_percent,omitempty"`
	ActionCodeEnabled  *uint32 `protobuf:"varint,3,opt,name=action_code_enabled,json=actionCodeEnabled,proto3,oneof" json:"action_code_enabled,omitempty"`
	MessageEnabled     *string `protobuf:"bytes,4,opt,name=message_enabled,json=messageEnabled,proto3,oneof" json:"message_enabled,omitempty"`
	ActionCodeDisabled *uint32 `protobuf:"varint,5,opt,name=action_code_disabled,json=actionCodeDisabled,proto3,oneof" json:"action_code_disabled,omitempty"`
	MessageDisabled    *string `protobuf:"bytes,6,opt,name=message_disabled,json=messageDisabled,proto3,oneof" json:"message_disabled,omitempty"`
}

func (x *BrowserConfig) Reset() {
	*x = BrowserConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowserConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowserConfig) ProtoMessage() {}

func (x *BrowserConfig) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowserConfig.ProtoReflect.Descriptor instead.
func (*BrowserConfig) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_config_proto_rawDescGZIP(), []int{6}
}

func (x *BrowserConfig) GetEnabledPercent() uint32 {
	if x != nil && x.EnabledPercent != nil {
		return *x.EnabledPercent
	}
	return 0
}

func (x *BrowserConfig) GetActionCodeEnabled() uint32 {
	if x != nil && x.ActionCodeEnabled != nil {
		return *x.ActionCodeEnabled
	}
	return 0
}

func (x *BrowserConfig) GetMessageEnabled() string {
	if x != nil && x.MessageEnabled != nil {
		return *x.MessageEnabled
	}
	return ""
}

func (x *BrowserConfig) GetActionCodeDisabled() uint32 {
	if x != nil && x.ActionCodeDisabled != nil {
		return *x.ActionCodeDisabled
	}
	return 0
}

func (x *BrowserConfig) GetMessageDisabled() string {
	if x != nil && x.MessageDisabled != nil {
		return *x.MessageDisabled
	}
	return ""
}

// GetServiceConfigRequest is the request from Backend SDKs to Hub for a service config. SDKs are expected to periodically poll, giving the version of the most recent configuration seen. Configurations may be large; we will not re-send them unless they have changed.
//
// Required Header: X-Stanza-Key
type GetServiceConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set if the client has seen a previous version of the config. Server will send data only if newer config available.
	VersionSeen string `protobuf:"bytes,1,opt,name=version_seen,json=versionSeen,proto3" json:"version_seen,omitempty"`
	// Information required to select and return the most recent ServiceConfig version
	Service *ServiceSelector `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *GetServiceConfigRequest) Reset() {
	*x = GetServiceConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceConfigRequest) ProtoMessage() {}

func (x *GetServiceConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceConfigRequest.ProtoReflect.Descriptor instead.
func (*GetServiceConfigRequest) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_config_proto_rawDescGZIP(), []int{7}
}

func (x *GetServiceConfigRequest) GetVersionSeen() string {
	if x != nil {
		return x.VersionSeen
	}
	return ""
}

func (x *GetServiceConfigRequest) GetService() *ServiceSelector {
	if x != nil {
		return x.Service
	}
	return nil
}

// GetServiceConfigResponse is the response from Hub to Backend SDKs. Note that `config_data_sent` will be false and `config` will be empty if we did not have a newer config version than `version_seen`.
type GetServiceConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        string         `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ConfigDataSent bool           `protobuf:"varint,2,opt,name=config_data_sent,json=configDataSent,proto3" json:"config_data_sent,omitempty"`
	Config         *ServiceConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetServiceConfigResponse) Reset() {
	*x = GetServiceConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceConfigResponse) ProtoMessage() {}

func (x *GetServiceConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceConfigResponse.ProtoReflect.Descriptor instead.
func (*GetServiceConfigResponse) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_config_proto_rawDescGZIP(), []int{8}
}

func (x *GetServiceConfigResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetServiceConfigResponse) GetConfigDataSent() bool {
	if x != nil {
		return x.ConfigDataSent
	}
	return false
}

func (x *GetServiceConfigResponse) GetConfig() *ServiceConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// ServiceConfig represents a configuration for a given Stanza SDK instrumented service.
type ServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceConfig    *TraceConfig    `protobuf:"bytes,3,opt,name=trace_config,json=traceConfig,proto3,oneof" json:"trace_config,omitempty"`
	MetricConfig   *MetricConfig   `protobuf:"bytes,4,opt,name=metric_config,json=metricConfig,proto3,oneof" json:"metric_config,omitempty"`
	SentinelConfig *SentinelConfig `protobuf:"bytes,5,opt,name=sentinel_config,json=sentinelConfig,proto3,oneof" json:"sentinel_config,omitempty"`
}

func (x *ServiceConfig) Reset() {
	*x = ServiceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig) ProtoMessage() {}

func (x *ServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig.ProtoReflect.Descriptor instead.
func (*ServiceConfig) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_config_proto_rawDescGZIP(), []int{9}
}

func (x *ServiceConfig) GetTraceConfig() *TraceConfig {
	if x != nil {
		return x.TraceConfig
	}
	return nil
}

func (x *ServiceConfig) GetMetricConfig() *MetricConfig {
	if x != nil {
		return x.MetricConfig
	}
	return nil
}

func (x *ServiceConfig) GetSentinelConfig() *SentinelConfig {
	if x != nil {
		return x.SentinelConfig
	}
	return nil
}

type TraceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectorUrl        *string                `protobuf:"bytes,1,opt,name=collector_url,json=collectorUrl,proto3,oneof" json:"collector_url,omitempty"`                    // url of OTEL collector - grpc
	CollectorKey        *string                `protobuf:"bytes,2,opt,name=collector_key,json=collectorKey,proto3,oneof" json:"collector_key,omitempty"`                    // send as x-stanza-key header
	SampleRateDefault   *float32               `protobuf:"fixed32,3,opt,name=sample_rate_default,json=sampleRateDefault,proto3,oneof" json:"sample_rate_default,omitempty"` // default base sampling rate
	Overrides           []*TraceConfigOverride `protobuf:"bytes,4,rep,name=overrides,proto3" json:"overrides,omitempty"`                                                    // span sampling rate overrides
	HeaderSampleConfigs []*HeaderTraceConfig   `protobuf:"bytes,5,rep,name=header_sample_configs,json=headerSampleConfigs,proto3" json:"header_sample_configs,omitempty"`   // which headers to capture
	ParamSampleConfigs  []*ParamTraceConfig    `protobuf:"bytes,6,rep,name=param_sample_configs,json=paramSampleConfigs,proto3" json:"param_sample_configs,omitempty"`      // which parameters to capture
	CollectorUrlHttp    *string                `protobuf:"bytes,7,opt,name=collector_url_http,json=collectorUrlHttp,proto3,oneof" json:"collector_url_http,omitempty"`      // url of OTEL collector - HTTP
}

func (x *TraceConfig) Reset() {
	*x = TraceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceConfig) ProtoMessage() {}

func (x *TraceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceConfig.ProtoReflect.Descriptor instead.
func (*TraceConfig) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_config_proto_rawDescGZIP(), []int{10}
}

func (x *TraceConfig) GetCollectorUrl() string {
	if x != nil && x.CollectorUrl != nil {
		return *x.CollectorUrl
	}
	return ""
}

func (x *TraceConfig) GetCollectorKey() string {
	if x != nil && x.CollectorKey != nil {
		return *x.CollectorKey
	}
	return ""
}

func (x *TraceConfig) GetSampleRateDefault() float32 {
	if x != nil && x.SampleRateDefault != nil {
		return *x.SampleRateDefault
	}
	return 0
}

func (x *TraceConfig) GetOverrides() []*TraceConfigOverride {
	if x != nil {
		return x.Overrides
	}
	return nil
}

func (x *TraceConfig) GetHeaderSampleConfigs() []*HeaderTraceConfig {
	if x != nil {
		return x.HeaderSampleConfigs
	}
	return nil
}

func (x *TraceConfig) GetParamSampleConfigs() []*ParamTraceConfig {
	if x != nil {
		return x.ParamSampleConfigs
	}
	return nil
}

func (x *TraceConfig) GetCollectorUrlHttp() string {
	if x != nil && x.CollectorUrlHttp != nil {
		return *x.CollectorUrlHttp
	}
	return ""
}

type MetricConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectorUrl     *string `protobuf:"bytes,1,opt,name=collector_url,json=collectorUrl,proto3,oneof" json:"collector_url,omitempty"`               // url of OTEL collector - grpc
	CollectorKey     *string `protobuf:"bytes,2,opt,name=collector_key,json=collectorKey,proto3,oneof" json:"collector_key,omitempty"`               // send as x-stanza-key header
	CollectorUrlHttp *string `protobuf:"bytes,3,opt,name=collector_url_http,json=collectorUrlHttp,proto3,oneof" json:"collector_url_http,omitempty"` // url of OTEL collector - HTTP
}

func (x *MetricConfig) Reset() {
	*x = MetricConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricConfig) ProtoMessage() {}

func (x *MetricConfig) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricConfig.ProtoReflect.Descriptor instead.
func (*MetricConfig) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_config_proto_rawDescGZIP(), []int{11}
}

func (x *MetricConfig) GetCollectorUrl() string {
	if x != nil && x.CollectorUrl != nil {
		return *x.CollectorUrl
	}
	return ""
}

func (x *MetricConfig) GetCollectorKey() string {
	if x != nil && x.CollectorKey != nil {
		return *x.CollectorKey
	}
	return ""
}

func (x *MetricConfig) GetCollectorUrlHttp() string {
	if x != nil && x.CollectorUrlHttp != nil {
		return *x.CollectorUrlHttp
	}
	return ""
}

// SentinelConfig represents Sentinel compliant JSON configuration for the given Sentinel types. These rules are "per service" (not per Decorator) with Decorator specific routing encoded in the given JSON blobs (as Sentinel "Resources").
type SentinelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CircuitbreakerRulesJson *string `protobuf:"bytes,1,opt,name=circuitbreaker_rules_json,json=circuitbreakerRulesJson,proto3,oneof" json:"circuitbreaker_rules_json,omitempty"`
	FlowRulesJson           *string `protobuf:"bytes,2,opt,name=flow_rules_json,json=flowRulesJson,proto3,oneof" json:"flow_rules_json,omitempty"`
	IsolationRulesJson      *string `protobuf:"bytes,3,opt,name=isolation_rules_json,json=isolationRulesJson,proto3,oneof" json:"isolation_rules_json,omitempty"`
	SystemRulesJson         *string `protobuf:"bytes,4,opt,name=system_rules_json,json=systemRulesJson,proto3,oneof" json:"system_rules_json,omitempty"`
}

func (x *SentinelConfig) Reset() {
	*x = SentinelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentinelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentinelConfig) ProtoMessage() {}

func (x *SentinelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentinelConfig.ProtoReflect.Descriptor instead.
func (*SentinelConfig) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_config_proto_rawDescGZIP(), []int{12}
}

func (x *SentinelConfig) GetCircuitbreakerRulesJson() string {
	if x != nil && x.CircuitbreakerRulesJson != nil {
		return *x.CircuitbreakerRulesJson
	}
	return ""
}

func (x *SentinelConfig) GetFlowRulesJson() string {
	if x != nil && x.FlowRulesJson != nil {
		return *x.FlowRulesJson
	}
	return ""
}

func (x *SentinelConfig) GetIsolationRulesJson() string {
	if x != nil && x.IsolationRulesJson != nil {
		return *x.IsolationRulesJson
	}
	return ""
}

func (x *SentinelConfig) GetSystemRulesJson() string {
	if x != nil && x.SystemRulesJson != nil {
		return *x.SystemRulesJson
	}
	return ""
}

// This configuration allows different sample rates to be applied to selected spans.
type TraceConfigOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleRate    float32         `protobuf:"fixed32,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	SpanSelectors []*SpanSelector `protobuf:"bytes,2,rep,name=span_selectors,json=spanSelectors,proto3" json:"span_selectors,omitempty"`
}

func (x *TraceConfigOverride) Reset() {
	*x = TraceConfigOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceConfigOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceConfigOverride) ProtoMessage() {}

func (x *TraceConfigOverride) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceConfigOverride.ProtoReflect.Descriptor instead.
func (*TraceConfigOverride) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_config_proto_rawDescGZIP(), []int{13}
}

func (x *TraceConfigOverride) GetSampleRate() float32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *TraceConfigOverride) GetSpanSelectors() []*SpanSelector {
	if x != nil {
		return x.SpanSelectors
	}
	return nil
}

type SpanSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OTel attribute, e.g. peer.service, status, http.status_code. See:
	// https://opentelemetry.io/docs/reference/specification/trace/semantic_conventions/span-general/
	// https://opentelemetry.io/docs/reference/specification/trace/semantic_conventions/http/
	OtelAttribute string `protobuf:"bytes,1,opt,name=otel_attribute,json=otelAttribute,proto3" json:"otel_attribute,omitempty"`
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // Selector matches if value of 'otel_attribute' equals 'value'.
}

func (x *SpanSelector) Reset() {
	*x = SpanSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanSelector) ProtoMessage() {}

func (x *SpanSelector) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanSelector.ProtoReflect.Descriptor instead.
func (*SpanSelector) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_config_proto_rawDescGZIP(), []int{14}
}

func (x *SpanSelector) GetOtelAttribute() string {
	if x != nil {
		return x.OtelAttribute
	}
	return ""
}

func (x *SpanSelector) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Specifies which headers should be sampled - required by OTel spec.
type HeaderTraceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpanSelectors       []*SpanSelector `protobuf:"bytes,1,rep,name=span_selectors,json=spanSelectors,proto3" json:"span_selectors,omitempty"`                     // If no selectors specified then config is applied to all requests
	RequestHeaderNames  []string        `protobuf:"bytes,2,rep,name=request_header_names,json=requestHeaderNames,proto3" json:"request_header_names,omitempty"`    // Names of headers to collect
	ResponseHeaderNames []string        `protobuf:"bytes,3,rep,name=response_header_names,json=responseHeaderNames,proto3" json:"response_header_names,omitempty"` // Names of headers to collect
}

func (x *HeaderTraceConfig) Reset() {
	*x = HeaderTraceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderTraceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderTraceConfig) ProtoMessage() {}

func (x *HeaderTraceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderTraceConfig.ProtoReflect.Descriptor instead.
func (*HeaderTraceConfig) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_config_proto_rawDescGZIP(), []int{15}
}

func (x *HeaderTraceConfig) GetSpanSelectors() []*SpanSelector {
	if x != nil {
		return x.SpanSelectors
	}
	return nil
}

func (x *HeaderTraceConfig) GetRequestHeaderNames() []string {
	if x != nil {
		return x.RequestHeaderNames
	}
	return nil
}

func (x *HeaderTraceConfig) GetResponseHeaderNames() []string {
	if x != nil {
		return x.ResponseHeaderNames
	}
	return nil
}

// Specifies which request parameters should be sampled.
type ParamTraceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpanSelectors  []*SpanSelector `protobuf:"bytes,1,rep,name=span_selectors,json=spanSelectors,proto3" json:"span_selectors,omitempty"`    // If no selectors specified then config is applied to all requests
	ParameterNames []string        `protobuf:"bytes,2,rep,name=parameter_names,json=parameterNames,proto3" json:"parameter_names,omitempty"` // Names of parameters to collect
}

func (x *ParamTraceConfig) Reset() {
	*x = ParamTraceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParamTraceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamTraceConfig) ProtoMessage() {}

func (x *ParamTraceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParamTraceConfig.ProtoReflect.Descriptor instead.
func (*ParamTraceConfig) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_config_proto_rawDescGZIP(), []int{16}
}

func (x *ParamTraceConfig) GetSpanSelectors() []*SpanSelector {
	if x != nil {
		return x.SpanSelectors
	}
	return nil
}

func (x *ParamTraceConfig) GetParameterNames() []string {
	if x != nil {
		return x.ParameterNames
	}
	return nil
}

var File_stanza_hub_v1_config_proto protoreflect.FileDescriptor

var file_stanza_hub_v1_config_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2f, 0x68, 0x75, 0x62, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x74,
	0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x74, 0x61, 0x6e, 0x7a,
	0x61, 0x2f, 0x68, 0x75, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x65, 0x63,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x01, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e,
	0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x01, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x65, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e,
	0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xb7,
	0x02, 0x0a, 0x0f, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x61, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x45,
	0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68,
	0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x01, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x54, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68,
	0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x62,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x22, 0x59, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61,
	0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xf5, 0x02,
	0x0a, 0x0d, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2c, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x11, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03,
	0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x76, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x94, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x9e, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01,
	0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x4b, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x02, 0x52, 0x0e, 0x73, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x87, 0x04, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40,
	0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x12, 0x54, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x55, 0x72, 0x6c, 0x48, 0x74, 0x74, 0x70, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6b, 0x65, 0x79,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x22,
	0xd0, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4b, 0x65,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x72, 0x6c,
	0x48, 0x74, 0x74, 0x70, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x68, 0x74,
	0x74, 0x70, 0x22, 0xc7, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x19, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x6a, 0x73,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x17, 0x63, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x4a,
	0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x4a, 0x73, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x12, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x1c, 0x0a, 0x1a, 0x5f,
	0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x13,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61,
	0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x73, 0x70, 0x61, 0x6e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x4b, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x6e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x74, 0x65, 0x6c,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6f, 0x74, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x0e, 0x73,
	0x70, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0d, 0x73, 0x70, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x7f, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x70, 0x61,
	0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d,
	0x73, 0x70, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0xce, 0x07, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x84, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x28, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x63,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x01, 0x92, 0x41, 0x79, 0x12, 0x14, 0x47, 0x65, 0x74, 0x20,
	0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x25, 0x47, 0x65, 0x74, 0x20, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x53, 0x74, 0x61, 0x6e,
	0x7a, 0x61, 0x20, 0x48, 0x75, 0x62, 0x2e, 0x4a, 0x3a, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x33,
	0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x2d, 0x0a, 0x2b, 0x1a, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a,
	0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0xbc, 0x03, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x27, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68,
	0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd3, 0x02, 0x92, 0x41, 0xb4, 0x02, 0x12,
	0x13, 0x47, 0x65, 0x74, 0x20, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x1a, 0x24, 0x47, 0x65, 0x74, 0x20, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x53,
	0x74, 0x61, 0x6e, 0x7a, 0x61, 0x20, 0x48, 0x75, 0x62, 0x2e, 0x4a, 0x8a, 0x01, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x82, 0x01, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x2c, 0x0a, 0x2a, 0x1a, 0x28, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x4e, 0x0a, 0x04, 0x45, 0x54, 0x61, 0x67, 0x12,
	0x46, 0x0a, 0x3c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x12,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4a, 0x6a, 0x0a, 0x03, 0x33, 0x30, 0x34, 0x12, 0x63,
	0x0a, 0x11, 0x4f, 0x4b, 0x2c, 0x20, 0x4e, 0x6f, 0x74, 0x20, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x2e, 0x1a, 0x4e, 0x0a, 0x04, 0x45, 0x54, 0x61, 0x67, 0x12, 0x46, 0x0a, 0x3c, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x12, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0xf6,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0x92, 0x41, 0x73, 0x12, 0x12, 0x47, 0x65, 0x74, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x23,
	0x47, 0x65, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x20, 0x48,
	0x75, 0x62, 0x2e, 0x4a, 0x38, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x31, 0x0a, 0x02, 0x4f, 0x4b,
	0x12, 0x2b, 0x0a, 0x29, 0x1a, 0x27, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0xb2, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2f, 0x68, 0x75, 0x62, 0x2f,
	0x76, 0x31, 0x3b, 0x68, 0x75, 0x62, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x48, 0x58, 0xaa, 0x02,
	0x0d, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x48, 0x75, 0x62, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x0d, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x5c, 0x48, 0x75, 0x62, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x19, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x5c, 0x48, 0x75, 0x62, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x53, 0x74, 0x61,
	0x6e, 0x7a, 0x61, 0x3a, 0x3a, 0x48, 0x75, 0x62, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stanza_hub_v1_config_proto_rawDescOnce sync.Once
	file_stanza_hub_v1_config_proto_rawDescData = file_stanza_hub_v1_config_proto_rawDesc
)

func file_stanza_hub_v1_config_proto_rawDescGZIP() []byte {
	file_stanza_hub_v1_config_proto_rawDescOnce.Do(func() {
		file_stanza_hub_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_stanza_hub_v1_config_proto_rawDescData)
	})
	return file_stanza_hub_v1_config_proto_rawDescData
}

var file_stanza_hub_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_stanza_hub_v1_config_proto_goTypes = []interface{}{
	(*GetDecoratorConfigRequest)(nil),  // 0: stanza.hub.v1.GetDecoratorConfigRequest
	(*GetDecoratorConfigResponse)(nil), // 1: stanza.hub.v1.GetDecoratorConfigResponse
	(*DecoratorConfig)(nil),            // 2: stanza.hub.v1.DecoratorConfig
	(*GetBrowserContextRequest)(nil),   // 3: stanza.hub.v1.GetBrowserContextRequest
	(*GetBrowserContextResponse)(nil),  // 4: stanza.hub.v1.GetBrowserContextResponse
	(*FeatureConfig)(nil),              // 5: stanza.hub.v1.FeatureConfig
	(*BrowserConfig)(nil),              // 6: stanza.hub.v1.BrowserConfig
	(*GetServiceConfigRequest)(nil),    // 7: stanza.hub.v1.GetServiceConfigRequest
	(*GetServiceConfigResponse)(nil),   // 8: stanza.hub.v1.GetServiceConfigResponse
	(*ServiceConfig)(nil),              // 9: stanza.hub.v1.ServiceConfig
	(*TraceConfig)(nil),                // 10: stanza.hub.v1.TraceConfig
	(*MetricConfig)(nil),               // 11: stanza.hub.v1.MetricConfig
	(*SentinelConfig)(nil),             // 12: stanza.hub.v1.SentinelConfig
	(*TraceConfigOverride)(nil),        // 13: stanza.hub.v1.TraceConfigOverride
	(*SpanSelector)(nil),               // 14: stanza.hub.v1.SpanSelector
	(*HeaderTraceConfig)(nil),          // 15: stanza.hub.v1.HeaderTraceConfig
	(*ParamTraceConfig)(nil),           // 16: stanza.hub.v1.ParamTraceConfig
	(*DecoratorServiceSelector)(nil),   // 17: stanza.hub.v1.DecoratorServiceSelector
	(*FeatureSelector)(nil),            // 18: stanza.hub.v1.FeatureSelector
	(*ServiceSelector)(nil),            // 19: stanza.hub.v1.ServiceSelector
}
var file_stanza_hub_v1_config_proto_depIdxs = []int32{
	17, // 0: stanza.hub.v1.GetDecoratorConfigRequest.s:type_name -> stanza.hub.v1.DecoratorServiceSelector
	2,  // 1: stanza.hub.v1.GetDecoratorConfigResponse.config:type_name -> stanza.hub.v1.DecoratorConfig
	10, // 2: stanza.hub.v1.DecoratorConfig.trace_config:type_name -> stanza.hub.v1.TraceConfig
	11, // 3: stanza.hub.v1.DecoratorConfig.metric_config:type_name -> stanza.hub.v1.MetricConfig
	18, // 4: stanza.hub.v1.GetBrowserContextRequest.feature:type_name -> stanza.hub.v1.FeatureSelector
	5,  // 5: stanza.hub.v1.GetBrowserContextResponse.feature_configs:type_name -> stanza.hub.v1.FeatureConfig
	6,  // 6: stanza.hub.v1.FeatureConfig.config:type_name -> stanza.hub.v1.BrowserConfig
	19, // 7: stanza.hub.v1.GetServiceConfigRequest.service:type_name -> stanza.hub.v1.ServiceSelector
	9,  // 8: stanza.hub.v1.GetServiceConfigResponse.config:type_name -> stanza.hub.v1.ServiceConfig
	10, // 9: stanza.hub.v1.ServiceConfig.trace_config:type_name -> stanza.hub.v1.TraceConfig
	11, // 10: stanza.hub.v1.ServiceConfig.metric_config:type_name -> stanza.hub.v1.MetricConfig
	12, // 11: stanza.hub.v1.ServiceConfig.sentinel_config:type_name -> stanza.hub.v1.SentinelConfig
	13, // 12: stanza.hub.v1.TraceConfig.overrides:type_name -> stanza.hub.v1.TraceConfigOverride
	15, // 13: stanza.hub.v1.TraceConfig.header_sample_configs:type_name -> stanza.hub.v1.HeaderTraceConfig
	16, // 14: stanza.hub.v1.TraceConfig.param_sample_configs:type_name -> stanza.hub.v1.ParamTraceConfig
	14, // 15: stanza.hub.v1.TraceConfigOverride.span_selectors:type_name -> stanza.hub.v1.SpanSelector
	14, // 16: stanza.hub.v1.HeaderTraceConfig.span_selectors:type_name -> stanza.hub.v1.SpanSelector
	14, // 17: stanza.hub.v1.ParamTraceConfig.span_selectors:type_name -> stanza.hub.v1.SpanSelector
	0,  // 18: stanza.hub.v1.ConfigService.GetDecoratorConfig:input_type -> stanza.hub.v1.GetDecoratorConfigRequest
	3,  // 19: stanza.hub.v1.ConfigService.GetBrowserContext:input_type -> stanza.hub.v1.GetBrowserContextRequest
	7,  // 20: stanza.hub.v1.ConfigService.GetServiceConfig:input_type -> stanza.hub.v1.GetServiceConfigRequest
	1,  // 21: stanza.hub.v1.ConfigService.GetDecoratorConfig:output_type -> stanza.hub.v1.GetDecoratorConfigResponse
	4,  // 22: stanza.hub.v1.ConfigService.GetBrowserContext:output_type -> stanza.hub.v1.GetBrowserContextResponse
	8,  // 23: stanza.hub.v1.ConfigService.GetServiceConfig:output_type -> stanza.hub.v1.GetServiceConfigResponse
	21, // [21:24] is the sub-list for method output_type
	18, // [18:21] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_stanza_hub_v1_config_proto_init() }
func file_stanza_hub_v1_config_proto_init() {
	if File_stanza_hub_v1_config_proto != nil {
		return
	}
	file_stanza_hub_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_stanza_hub_v1_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDecoratorConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDecoratorConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecoratorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBrowserContextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBrowserContextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowserConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentinelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceConfigOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderTraceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParamTraceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_stanza_hub_v1_config_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_stanza_hub_v1_config_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_stanza_hub_v1_config_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_stanza_hub_v1_config_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_stanza_hub_v1_config_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_stanza_hub_v1_config_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_stanza_hub_v1_config_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stanza_hub_v1_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stanza_hub_v1_config_proto_goTypes,
		DependencyIndexes: file_stanza_hub_v1_config_proto_depIdxs,
		MessageInfos:      file_stanza_hub_v1_config_proto_msgTypes,
	}.Build()
	File_stanza_hub_v1_config_proto = out.File
	file_stanza_hub_v1_config_proto_rawDesc = nil
	file_stanza_hub_v1_config_proto_goTypes = nil
	file_stanza_hub_v1_config_proto_depIdxs = nil
}
