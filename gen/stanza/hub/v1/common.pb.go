// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: stanza/hub/v1/common.proto

package hubv1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Health int32

const (
	Health_HEALTH_UNSPECIFIED Health = 0
	Health_HEALTH_OK          Health = 1
	Health_HEALTH_OVERLOAD    Health = 2
	Health_HEALTH_DOWN        Health = 3
)

// Enum value maps for Health.
var (
	Health_name = map[int32]string{
		0: "HEALTH_UNSPECIFIED",
		1: "HEALTH_OK",
		2: "HEALTH_OVERLOAD",
		3: "HEALTH_DOWN",
	}
	Health_value = map[string]int32{
		"HEALTH_UNSPECIFIED": 0,
		"HEALTH_OK":          1,
		"HEALTH_OVERLOAD":    2,
		"HEALTH_DOWN":        3,
	}
)

func (x Health) Enum() *Health {
	p := new(Health)
	*p = x
	return p
}

func (x Health) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Health) Descriptor() protoreflect.EnumDescriptor {
	return file_stanza_hub_v1_common_proto_enumTypes[0].Descriptor()
}

func (Health) Type() protoreflect.EnumType {
	return &file_stanza_hub_v1_common_proto_enumTypes[0]
}

func (x Health) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Health.Descriptor instead.
func (Health) EnumDescriptor() ([]byte, []int) {
	return file_stanza_hub_v1_common_proto_rawDescGZIP(), []int{0}
}

type State int32

const (
	State_STATE_UNSPECIFIED State = 0
	State_STATE_ENABLED     State = 1
	State_STATE_DISABLED    State = 2
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_ENABLED",
		2: "STATE_DISABLED",
	}
	State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_ENABLED":     1,
		"STATE_DISABLED":    2,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_stanza_hub_v1_common_proto_enumTypes[1].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_stanza_hub_v1_common_proto_enumTypes[1]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_stanza_hub_v1_common_proto_rawDescGZIP(), []int{1}
}

// Config describes config state reasons used by Stanza SDKs
type Config int32

const (
	Config_CONFIG_UNSPECIFIED   Config = 0
	Config_CONFIG_CACHED_OK     Config = 1 // SDK has successfully fetched guard config previously and cached it
	Config_CONFIG_FETCHED_OK    Config = 2 // SDK has successfully fetched guard config in response to this request
	Config_CONFIG_NOT_FOUND     Config = 3 // SDK tried to fetch a Guard whose config could not be found
	Config_CONFIG_FETCH_ERROR   Config = 4 // SDK received an error from the Stanza control plane
	Config_CONFIG_FETCH_TIMEOUT Config = 5 // SDK timed out trying to get config from the Stanza control plane
)

// Enum value maps for Config.
var (
	Config_name = map[int32]string{
		0: "CONFIG_UNSPECIFIED",
		1: "CONFIG_CACHED_OK",
		2: "CONFIG_FETCHED_OK",
		3: "CONFIG_NOT_FOUND",
		4: "CONFIG_FETCH_ERROR",
		5: "CONFIG_FETCH_TIMEOUT",
	}
	Config_value = map[string]int32{
		"CONFIG_UNSPECIFIED":   0,
		"CONFIG_CACHED_OK":     1,
		"CONFIG_FETCHED_OK":    2,
		"CONFIG_NOT_FOUND":     3,
		"CONFIG_FETCH_ERROR":   4,
		"CONFIG_FETCH_TIMEOUT": 5,
	}
)

func (x Config) Enum() *Config {
	p := new(Config)
	*p = x
	return p
}

func (x Config) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Config) Descriptor() protoreflect.EnumDescriptor {
	return file_stanza_hub_v1_common_proto_enumTypes[2].Descriptor()
}

func (Config) Type() protoreflect.EnumType {
	return &file_stanza_hub_v1_common_proto_enumTypes[2]
}

func (x Config) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Config.Descriptor instead.
func (Config) EnumDescriptor() ([]byte, []int) {
	return file_stanza_hub_v1_common_proto_rawDescGZIP(), []int{2}
}

// Local describes Guard reasons used by Stanza SDKs
type Local int32

const (
	Local_LOCAL_UNSPECIFIED   Local = 0
	Local_LOCAL_NOT_SUPPORTED Local = 1 // SDK does not support locally evaluated rules
	Local_LOCAL_NOT_EVAL      Local = 2 // SDK never evaluated (failed before local validation attempted)
	Local_LOCAL_EVAL_DISABLED Local = 3 // No locally evaluated rules exist for this guard or it was explicitly disabled
	Local_LOCAL_ALLOWED       Local = 4 // Abstract “allowed” by all locally evaluated rules
	Local_LOCAL_BLOCKED       Local = 5 // Abstract “blocked” by any locally evaluated rule
	Local_LOCAL_ERROR         Local = 6 // SDK experienced some locally-sourced error and could not perform local rule evaluation
)

// Enum value maps for Local.
var (
	Local_name = map[int32]string{
		0: "LOCAL_UNSPECIFIED",
		1: "LOCAL_NOT_SUPPORTED",
		2: "LOCAL_NOT_EVAL",
		3: "LOCAL_EVAL_DISABLED",
		4: "LOCAL_ALLOWED",
		5: "LOCAL_BLOCKED",
		6: "LOCAL_ERROR",
	}
	Local_value = map[string]int32{
		"LOCAL_UNSPECIFIED":   0,
		"LOCAL_NOT_SUPPORTED": 1,
		"LOCAL_NOT_EVAL":      2,
		"LOCAL_EVAL_DISABLED": 3,
		"LOCAL_ALLOWED":       4,
		"LOCAL_BLOCKED":       5,
		"LOCAL_ERROR":         6,
	}
)

func (x Local) Enum() *Local {
	p := new(Local)
	*p = x
	return p
}

func (x Local) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Local) Descriptor() protoreflect.EnumDescriptor {
	return file_stanza_hub_v1_common_proto_enumTypes[3].Descriptor()
}

func (Local) Type() protoreflect.EnumType {
	return &file_stanza_hub_v1_common_proto_enumTypes[3]
}

func (x Local) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Local.Descriptor instead.
func (Local) EnumDescriptor() ([]byte, []int) {
	return file_stanza_hub_v1_common_proto_rawDescGZIP(), []int{3}
}

// Token describes Guard reasons used by Stanza SDKs
type Token int32

const (
	Token_TOKEN_UNSPECIFIED        Token = 0
	Token_TOKEN_NOT_EVAL           Token = 1 // SDK never evaluated (failed before token validation attempted)
	Token_TOKEN_EVAL_DISABLED      Token = 2 // Guard configuration does not include evaluating tokens
	Token_TOKEN_NOT_VALID          Token = 3 // Stanza control plane checked the token and responded that it was not valid
	Token_TOKEN_VALID              Token = 4 // Stanza control plane checked the token and responded that it was valid
	Token_TOKEN_VALIDATION_ERROR   Token = 5 // Stanza control plane responded with an error when validating token
	Token_TOKEN_VALIDATION_TIMEOUT Token = 6 // Stanza control plane request to validate token timed out
)

// Enum value maps for Token.
var (
	Token_name = map[int32]string{
		0: "TOKEN_UNSPECIFIED",
		1: "TOKEN_NOT_EVAL",
		2: "TOKEN_EVAL_DISABLED",
		3: "TOKEN_NOT_VALID",
		4: "TOKEN_VALID",
		5: "TOKEN_VALIDATION_ERROR",
		6: "TOKEN_VALIDATION_TIMEOUT",
	}
	Token_value = map[string]int32{
		"TOKEN_UNSPECIFIED":        0,
		"TOKEN_NOT_EVAL":           1,
		"TOKEN_EVAL_DISABLED":      2,
		"TOKEN_NOT_VALID":          3,
		"TOKEN_VALID":              4,
		"TOKEN_VALIDATION_ERROR":   5,
		"TOKEN_VALIDATION_TIMEOUT": 6,
	}
)

func (x Token) Enum() *Token {
	p := new(Token)
	*p = x
	return p
}

func (x Token) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Token) Descriptor() protoreflect.EnumDescriptor {
	return file_stanza_hub_v1_common_proto_enumTypes[4].Descriptor()
}

func (Token) Type() protoreflect.EnumType {
	return &file_stanza_hub_v1_common_proto_enumTypes[4]
}

func (x Token) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Token.Descriptor instead.
func (Token) EnumDescriptor() ([]byte, []int) {
	return file_stanza_hub_v1_common_proto_rawDescGZIP(), []int{4}
}

// Quota describes Guard reasons used by Stanza SDKs
type Quota int32

const (
	Quota_QUOTA_UNSPECIFIED   Quota = 0
	Quota_QUOTA_NOT_EVAL      Quota = 1 // SDK never evaluated (failed before quota validation attempted)
	Quota_QUOTA_EVAL_DISABLED Quota = 2 // Guard configuration does not include evaluating quota
	Quota_QUOTA_LOCAL_ERROR   Quota = 3 // SDK experienced some locally-sourced error and could not check quota
	Quota_QUOTA_BLOCKED       Quota = 4 // Stanza control plane checked quota and blocked the request
	Quota_QUOTA_GRANTED       Quota = 5 // Stanza control plane checked quota and granted the request
	Quota_QUOTA_ERROR         Quota = 6 // Stanza control plane responded with an error when checking quota
	Quota_QUOTA_TIMEOUT       Quota = 7 // Stanza control plane request to check quota timed out
)

// Enum value maps for Quota.
var (
	Quota_name = map[int32]string{
		0: "QUOTA_UNSPECIFIED",
		1: "QUOTA_NOT_EVAL",
		2: "QUOTA_EVAL_DISABLED",
		3: "QUOTA_LOCAL_ERROR",
		4: "QUOTA_BLOCKED",
		5: "QUOTA_GRANTED",
		6: "QUOTA_ERROR",
		7: "QUOTA_TIMEOUT",
	}
	Quota_value = map[string]int32{
		"QUOTA_UNSPECIFIED":   0,
		"QUOTA_NOT_EVAL":      1,
		"QUOTA_EVAL_DISABLED": 2,
		"QUOTA_LOCAL_ERROR":   3,
		"QUOTA_BLOCKED":       4,
		"QUOTA_GRANTED":       5,
		"QUOTA_ERROR":         6,
		"QUOTA_TIMEOUT":       7,
	}
)

func (x Quota) Enum() *Quota {
	p := new(Quota)
	*p = x
	return p
}

func (x Quota) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Quota) Descriptor() protoreflect.EnumDescriptor {
	return file_stanza_hub_v1_common_proto_enumTypes[5].Descriptor()
}

func (Quota) Type() protoreflect.EnumType {
	return &file_stanza_hub_v1_common_proto_enumTypes[5]
}

func (x Quota) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Quota.Descriptor instead.
func (Quota) EnumDescriptor() ([]byte, []int) {
	return file_stanza_hub_v1_common_proto_rawDescGZIP(), []int{5}
}

// Mode describes what mode the Guard or Service is operating under.
type Mode int32

const (
	Mode_MODE_UNSPECIFIED Mode = 0
	Mode_MODE_NORMAL      Mode = 1 // Normal, Stanza may shed requests according to its configuration
	Mode_MODE_REPORT_ONLY Mode = 2 // Report-only, Stanza never sheds requests, but does perform all processing and records metrics about the actions that would be taken if in normal mode
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "MODE_NORMAL",
		2: "MODE_REPORT_ONLY",
	}
	Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"MODE_NORMAL":      1,
		"MODE_REPORT_ONLY": 2,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_stanza_hub_v1_common_proto_enumTypes[6].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_stanza_hub_v1_common_proto_enumTypes[6]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_stanza_hub_v1_common_proto_rawDescGZIP(), []int{6}
}

type GuardSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags        []*Tag `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *GuardSelector) Reset() {
	*x = GuardSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuardSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuardSelector) ProtoMessage() {}

func (x *GuardSelector) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuardSelector.ProtoReflect.Descriptor instead.
func (*GuardSelector) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_common_proto_rawDescGZIP(), []int{0}
}

func (x *GuardSelector) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *GuardSelector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GuardSelector) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type FeatureSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string   `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
	Names       []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	Tags        []*Tag   `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *FeatureSelector) Reset() {
	*x = FeatureSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureSelector) ProtoMessage() {}

func (x *FeatureSelector) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureSelector.ProtoReflect.Descriptor instead.
func (*FeatureSelector) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *FeatureSelector) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *FeatureSelector) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *FeatureSelector) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type GuardFeatureSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string  `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
	GuardName   string  `protobuf:"bytes,2,opt,name=guard_name,json=guardName,proto3" json:"guard_name,omitempty"`
	FeatureName *string `protobuf:"bytes,3,opt,name=feature_name,json=featureName,proto3,oneof" json:"feature_name,omitempty"`
	Tags        []*Tag  `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *GuardFeatureSelector) Reset() {
	*x = GuardFeatureSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuardFeatureSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuardFeatureSelector) ProtoMessage() {}

func (x *GuardFeatureSelector) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuardFeatureSelector.ProtoReflect.Descriptor instead.
func (*GuardFeatureSelector) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_common_proto_rawDescGZIP(), []int{2}
}

func (x *GuardFeatureSelector) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *GuardFeatureSelector) GetGuardName() string {
	if x != nil {
		return x.GuardName
	}
	return ""
}

func (x *GuardFeatureSelector) GetFeatureName() string {
	if x != nil && x.FeatureName != nil {
		return *x.FeatureName
	}
	return ""
}

func (x *GuardFeatureSelector) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type GuardServiceSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment    string `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
	GuardName      string `protobuf:"bytes,2,opt,name=guard_name,json=guardName,proto3" json:"guard_name,omitempty"`
	ServiceName    string `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceRelease string `protobuf:"bytes,4,opt,name=service_release,json=serviceRelease,proto3" json:"service_release,omitempty"`
	Tags           []*Tag `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *GuardServiceSelector) Reset() {
	*x = GuardServiceSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuardServiceSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuardServiceSelector) ProtoMessage() {}

func (x *GuardServiceSelector) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuardServiceSelector.ProtoReflect.Descriptor instead.
func (*GuardServiceSelector) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_common_proto_rawDescGZIP(), []int{3}
}

func (x *GuardServiceSelector) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *GuardServiceSelector) GetGuardName() string {
	if x != nil {
		return x.GuardName
	}
	return ""
}

func (x *GuardServiceSelector) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *GuardServiceSelector) GetServiceRelease() string {
	if x != nil {
		return x.ServiceRelease
	}
	return ""
}

func (x *GuardServiceSelector) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ServiceSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string  `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Release     *string `protobuf:"bytes,3,opt,name=release,proto3,oneof" json:"release,omitempty"`
	Tags        []*Tag  `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ServiceSelector) Reset() {
	*x = ServiceSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceSelector) ProtoMessage() {}

func (x *ServiceSelector) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceSelector.ProtoReflect.Descriptor instead.
func (*ServiceSelector) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_common_proto_rawDescGZIP(), []int{4}
}

func (x *ServiceSelector) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *ServiceSelector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceSelector) GetRelease() string {
	if x != nil && x.Release != nil {
		return *x.Release
	}
	return ""
}

func (x *ServiceSelector) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type HealthByPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority uint32 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	Health   Health `protobuf:"varint,2,opt,name=health,proto3,enum=stanza.hub.v1.Health" json:"health,omitempty"`
}

func (x *HealthByPriority) Reset() {
	*x = HealthByPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthByPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthByPriority) ProtoMessage() {}

func (x *HealthByPriority) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthByPriority.ProtoReflect.Descriptor instead.
func (*HealthByPriority) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_common_proto_rawDescGZIP(), []int{5}
}

func (x *HealthByPriority) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *HealthByPriority) GetHealth() Health {
	if x != nil {
		return x.Health
	}
	return Health_HEALTH_UNSPECIFIED
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stanza_hub_v1_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_stanza_hub_v1_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_stanza_hub_v1_common_proto_rawDescGZIP(), []int{6}
}

func (x *Tag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Tag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_stanza_hub_v1_common_proto protoreflect.FileDescriptor

var file_stanza_hub_v1_common_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2f, 0x68, 0x75, 0x62, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x74,
	0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x77, 0x0a, 0x0d,
	0x47, 0x75, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x76, 0x0a, 0x0f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xc2, 0x01,
	0x0a, 0x14, 0x47, 0x75, 0x61, 0x72, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0a, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x67, 0x75, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61,
	0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x14, 0x47, 0x75, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0b, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68,
	0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x5d, 0x0a, 0x10, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x42, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0x2d, 0x0a, 0x03, 0x54, 0x61,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x55, 0x0a, 0x06, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x48,
	0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x45,
	0x41, 0x4c, 0x54, 0x48, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03,
	0x2a, 0x45, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x95, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x4f, 0x4b, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48,
	0x45, 0x44, 0x5f, 0x4f, 0x4b, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x05, 0x2a,
	0x9b, 0x01, 0x0a, 0x05, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x2a, 0xab, 0x01,
	0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x56, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x56, 0x41, 0x4c,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x04, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x1c, 0x0a,
	0x18, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x06, 0x2a, 0xac, 0x01, 0x0a, 0x05,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x55, 0x4f,
	0x54, 0x41, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x52, 0x41,
	0x4e, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x55, 0x4f, 0x54, 0x41,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x07, 0x2a, 0x43, 0x0a, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x42,
	0xa4, 0x05, 0x92, 0x41, 0xf1, 0x03, 0x12, 0x4f, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61,
	0x20, 0x48, 0x75, 0x62, 0x20, 0x41, 0x50, 0x49, 0x22, 0x38, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x6e,
	0x7a, 0x61, 0x12, 0x16, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x7a, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x16, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x40, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x55,
	0x0a, 0x03, 0x34, 0x32, 0x39, 0x12, 0x4e, 0x0a, 0x2f, 0x54, 0x6f, 0x6f, 0x20, 0x4d, 0x61, 0x6e,
	0x79, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2c, 0x20, 0x74, 0x72, 0x79, 0x20,
	0x61, 0x67, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x2d, 0x41, 0x66, 0x74, 0x65, 0x72, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x3b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x34, 0x0a, 0x15,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x57, 0x0a, 0x03, 0x35, 0x30, 0x33, 0x12, 0x50, 0x0a, 0x31, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x20, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x2c, 0x20, 0x74, 0x72, 0x79, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x20, 0x52, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x41, 0x66, 0x74, 0x65, 0x72, 0x2e, 0x12, 0x1b,
	0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x22, 0x0a, 0x20, 0x0a,
	0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x12, 0x08, 0x02, 0x1a,
	0x0c, 0x58, 0x2d, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2d, 0x4b, 0x65, 0x79, 0x20, 0x02, 0x62,
	0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x00, 0x72, 0x54, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x20, 0x48, 0x75, 0x62, 0x20,
	0x41, 0x50, 0x49, 0x12, 0x42, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x73, 0x74, 0x61,
	0x6e, 0x7a, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x70, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x69, 0x6f,
	0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x32, 0x39, 0x31, 0x61, 0x32,
	0x63, 0x66, 0x66, 0x39, 0x64, 0x31, 0x35, 0x36, 0x2d, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2d,
	0x68, 0x75, 0x62, 0x2d, 0x61, 0x70, 0x69, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x7a, 0x61, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x73, 0x2f, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2f, 0x68, 0x75, 0x62, 0x2f, 0x76, 0x31, 0x3b, 0x68, 0x75, 0x62,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x48, 0x58, 0xaa, 0x02, 0x0d, 0x53, 0x74, 0x61, 0x6e, 0x7a,
	0x61, 0x2e, 0x48, 0x75, 0x62, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x53, 0x74, 0x61, 0x6e, 0x7a,
	0x61, 0x5c, 0x48, 0x75, 0x62, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x53, 0x74, 0x61, 0x6e, 0x7a,
	0x61, 0x5c, 0x48, 0x75, 0x62, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x3a, 0x3a, 0x48,
	0x75, 0x62, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stanza_hub_v1_common_proto_rawDescOnce sync.Once
	file_stanza_hub_v1_common_proto_rawDescData = file_stanza_hub_v1_common_proto_rawDesc
)

func file_stanza_hub_v1_common_proto_rawDescGZIP() []byte {
	file_stanza_hub_v1_common_proto_rawDescOnce.Do(func() {
		file_stanza_hub_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_stanza_hub_v1_common_proto_rawDescData)
	})
	return file_stanza_hub_v1_common_proto_rawDescData
}

var file_stanza_hub_v1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_stanza_hub_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_stanza_hub_v1_common_proto_goTypes = []interface{}{
	(Health)(0),                  // 0: stanza.hub.v1.Health
	(State)(0),                   // 1: stanza.hub.v1.State
	(Config)(0),                  // 2: stanza.hub.v1.Config
	(Local)(0),                   // 3: stanza.hub.v1.Local
	(Token)(0),                   // 4: stanza.hub.v1.Token
	(Quota)(0),                   // 5: stanza.hub.v1.Quota
	(Mode)(0),                    // 6: stanza.hub.v1.Mode
	(*GuardSelector)(nil),        // 7: stanza.hub.v1.GuardSelector
	(*FeatureSelector)(nil),      // 8: stanza.hub.v1.FeatureSelector
	(*GuardFeatureSelector)(nil), // 9: stanza.hub.v1.GuardFeatureSelector
	(*GuardServiceSelector)(nil), // 10: stanza.hub.v1.GuardServiceSelector
	(*ServiceSelector)(nil),      // 11: stanza.hub.v1.ServiceSelector
	(*HealthByPriority)(nil),     // 12: stanza.hub.v1.HealthByPriority
	(*Tag)(nil),                  // 13: stanza.hub.v1.Tag
}
var file_stanza_hub_v1_common_proto_depIdxs = []int32{
	13, // 0: stanza.hub.v1.GuardSelector.tags:type_name -> stanza.hub.v1.Tag
	13, // 1: stanza.hub.v1.FeatureSelector.tags:type_name -> stanza.hub.v1.Tag
	13, // 2: stanza.hub.v1.GuardFeatureSelector.tags:type_name -> stanza.hub.v1.Tag
	13, // 3: stanza.hub.v1.GuardServiceSelector.tags:type_name -> stanza.hub.v1.Tag
	13, // 4: stanza.hub.v1.ServiceSelector.tags:type_name -> stanza.hub.v1.Tag
	0,  // 5: stanza.hub.v1.HealthByPriority.health:type_name -> stanza.hub.v1.Health
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_stanza_hub_v1_common_proto_init() }
func file_stanza_hub_v1_common_proto_init() {
	if File_stanza_hub_v1_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stanza_hub_v1_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuardSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuardFeatureSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuardServiceSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthByPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stanza_hub_v1_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_stanza_hub_v1_common_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_stanza_hub_v1_common_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stanza_hub_v1_common_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stanza_hub_v1_common_proto_goTypes,
		DependencyIndexes: file_stanza_hub_v1_common_proto_depIdxs,
		EnumInfos:         file_stanza_hub_v1_common_proto_enumTypes,
		MessageInfos:      file_stanza_hub_v1_common_proto_msgTypes,
	}.Build()
	File_stanza_hub_v1_common_proto = out.File
	file_stanza_hub_v1_common_proto_rawDesc = nil
	file_stanza_hub_v1_common_proto_goTypes = nil
	file_stanza_hub_v1_common_proto_depIdxs = nil
}
