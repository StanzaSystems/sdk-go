// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: stanza/hub/v1/stream.proto

package hubv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamBalancerService_UpdateStreams_FullMethodName = "/stanza.hub.v1.StreamBalancerService/UpdateStreams"
)

// StreamBalancerServiceClient is the client API for StreamBalancerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamBalancerServiceClient interface {
	UpdateStreams(ctx context.Context, in *UpdateStreamsRequest, opts ...grpc.CallOption) (*UpdateStreamsResponse, error)
}

type streamBalancerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamBalancerServiceClient(cc grpc.ClientConnInterface) StreamBalancerServiceClient {
	return &streamBalancerServiceClient{cc}
}

func (c *streamBalancerServiceClient) UpdateStreams(ctx context.Context, in *UpdateStreamsRequest, opts ...grpc.CallOption) (*UpdateStreamsResponse, error) {
	out := new(UpdateStreamsResponse)
	err := c.cc.Invoke(ctx, StreamBalancerService_UpdateStreams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamBalancerServiceServer is the server API for StreamBalancerService service.
// All implementations must embed UnimplementedStreamBalancerServiceServer
// for forward compatibility
type StreamBalancerServiceServer interface {
	UpdateStreams(context.Context, *UpdateStreamsRequest) (*UpdateStreamsResponse, error)
	mustEmbedUnimplementedStreamBalancerServiceServer()
}

// UnimplementedStreamBalancerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamBalancerServiceServer struct {
}

func (UnimplementedStreamBalancerServiceServer) UpdateStreams(context.Context, *UpdateStreamsRequest) (*UpdateStreamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStreams not implemented")
}
func (UnimplementedStreamBalancerServiceServer) mustEmbedUnimplementedStreamBalancerServiceServer() {}

// UnsafeStreamBalancerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamBalancerServiceServer will
// result in compilation errors.
type UnsafeStreamBalancerServiceServer interface {
	mustEmbedUnimplementedStreamBalancerServiceServer()
}

func RegisterStreamBalancerServiceServer(s grpc.ServiceRegistrar, srv StreamBalancerServiceServer) {
	s.RegisterService(&StreamBalancerService_ServiceDesc, srv)
}

func _StreamBalancerService_UpdateStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamBalancerServiceServer).UpdateStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamBalancerService_UpdateStreams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamBalancerServiceServer).UpdateStreams(ctx, req.(*UpdateStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamBalancerService_ServiceDesc is the grpc.ServiceDesc for StreamBalancerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamBalancerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stanza.hub.v1.StreamBalancerService",
	HandlerType: (*StreamBalancerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateStreams",
			Handler:    _StreamBalancerService_UpdateStreams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stanza/hub/v1/stream.proto",
}
